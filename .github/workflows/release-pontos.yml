name: Release Python package with pontos

on:
  pull_request:
    types: [closed]
  workflow_dispatch:

jobs:
  build-and-release:
    name: Create a new release with pontos
    # If the event is a workflow_dispatch or the label 'make release' is set and PR is closed because of a merge
    if: (github.event_name == 'workflow_dispatch') || (contains( github.event.pull_request.labels.*.name, 'make release') && github.event.pull_request.merged == true)
    runs-on: "ubuntu-latest"
    steps:
      - name: Setting the Reference
        run: |
          if [[ "${{ github.event_name }}" = "workflow_dispatch" ]]; then
            echo "RELEASE_REF=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "RELEASE_REF=${{ github.base_ref }}" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ env.FETCH_DEPTH }}
          persist-credentials: false
          ref: ${{ env.RELEASE_REF }}
      - name: Set git name, mail and origin
        run: |
          git config --global user.name "${{ secrets.GREENBONE_BOT }}"
          git config --global user.email "${{ secrets.GREENBONE_BOT_MAIL }}"
          git remote set-url origin https://${{ secrets.GREENBONE_BOT_TOKEN }}@github.com/${{ github.repository }}
          - name: allow admin users bypassing protection on ${{ env.RELEASE_REF }} branch
      - uses: greenbone/actions/poetry@v2
      - name: Allow admin users bypassing protection on ${{ env.RELEASE_REF }} branch
        run: |
          poetry run pontos-github-script scripts/github/enforce-admins.py ${{ github.repository }} ${{ env.RELEASE_REF }} --allow
        env:
          GITHUB_USER: ${{ secrets.GREENBONE_BOT }}
          GITHUB_TOKEN: ${{ secrets.GREENBONE_BOT_TOKEN }}
      - name: Prepare release
        run: |
          poetry run pontos-release prepare --release-type calendar
        env:
          GITHUB_USER: ${{ secrets.GREENBONE_BOT }}
          GITHUB_TOKEN: ${{ secrets.GREENBONE_BOT_TOKEN }}
      - name: Get release version
        run: |
          VERSION=$(poetry run pontos-version show)
          echo "Releasing $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Create release
        run: |
          poetry run pontos-release release
        env:
          GITHUB_USER: ${{ secrets.GREENBONE_BOT }}
          GITHUB_TOKEN: ${{ secrets.GREENBONE_BOT_TOKEN }}
      - name: Disable bypassing protection on ${{ env.RELEASE_REF }} branch for admin users
        run: |
          poetry run pontos-github-script scripts/github/enforce-admins.py ${{ github.repository }} ${{ env.RELEASE_REF }} --no-allow
        env:
          GITHUB_USER: ${{ secrets.GREENBONE_BOT }}
          GITHUB_TOKEN: ${{ secrets.GREENBONE_BOT_TOKEN }}
      - name: Import gpg key from secrets
        run: |
          echo -e "${{ secrets.GPG_KEY }}" >> tmp.file
          gpg --pinentry-mode loopback --passphrase ${{ secrets.GPG_PASSPHRASE }} --import tmp.file
          rm tmp.file
      - name: Sign assets for released version
        run: |
          echo "Signing assets for ${{env.VERSION}}"
          poetry run pontos-release sign --signing-key ${{ secrets.GPG_FINGERPRINT }} --passphrase ${{ secrets.GPG_PASSPHRASE }} --release-version ${{ env.VERSION }}
        env:
          GITHUB_USER: ${{ secrets.GREENBONE_BOT }}
          GITHUB_TOKEN: ${{ secrets.GREENBONE_BOT_TOKEN }}
